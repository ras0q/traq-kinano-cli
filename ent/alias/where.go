// Code generated by entc, DO NOT EDIT.

package alias

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ras0q/traq-kinano-cli/ent/predicate"
	"github.com/gofrs/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShort), v))
	})
}

// Long applies equality check predicate on the "long" field. It's identical to LongEQ.
func Long(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLong), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShort), v))
	})
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShort), v))
	})
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShort), v...))
	})
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShort), v...))
	})
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShort), v))
	})
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShort), v))
	})
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShort), v))
	})
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShort), v))
	})
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShort), v))
	})
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShort), v))
	})
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShort), v))
	})
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShort), v))
	})
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShort), v))
	})
}

// LongEQ applies the EQ predicate on the "long" field.
func LongEQ(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLong), v))
	})
}

// LongNEQ applies the NEQ predicate on the "long" field.
func LongNEQ(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLong), v))
	})
}

// LongIn applies the In predicate on the "long" field.
func LongIn(vs ...string) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLong), v...))
	})
}

// LongNotIn applies the NotIn predicate on the "long" field.
func LongNotIn(vs ...string) predicate.Alias {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Alias(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLong), v...))
	})
}

// LongGT applies the GT predicate on the "long" field.
func LongGT(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLong), v))
	})
}

// LongGTE applies the GTE predicate on the "long" field.
func LongGTE(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLong), v))
	})
}

// LongLT applies the LT predicate on the "long" field.
func LongLT(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLong), v))
	})
}

// LongLTE applies the LTE predicate on the "long" field.
func LongLTE(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLong), v))
	})
}

// LongContains applies the Contains predicate on the "long" field.
func LongContains(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLong), v))
	})
}

// LongHasPrefix applies the HasPrefix predicate on the "long" field.
func LongHasPrefix(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLong), v))
	})
}

// LongHasSuffix applies the HasSuffix predicate on the "long" field.
func LongHasSuffix(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLong), v))
	})
}

// LongEqualFold applies the EqualFold predicate on the "long" field.
func LongEqualFold(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLong), v))
	})
}

// LongContainsFold applies the ContainsFold predicate on the "long" field.
func LongContainsFold(v string) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLong), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Alias) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Alias) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Alias) predicate.Alias {
	return predicate.Alias(func(s *sql.Selector) {
		p(s.Not())
	})
}
